import { createClient, groq } from "next-sanity";

const client = createClient({
  projectId: process.env.NEXT_PUBLIC_SANITY_PROJECT_ID,
  dataset: process.env.NEXT_PUBLIC_SANITY_PROJECT_DATASET,
  token: process.env.SANITY_API_TOKEN,
  useCdn: false,
  apiVersion: "2025-01-01",
});

async function fetchNews() {
  try {
    const url = `https://newsdata.io/api/1/news?apikey=${process.env.NEWS_API_KEY}&category=entertainment&language=en`;

    const res = await fetch(url);
    if (!res.ok) {
      throw new Error(`Failed to fetch the news: ${res.statusText}`);
    }
    const data = await res.json();

    return data.results || [];
  } catch (error) {
    console.error("Error fetching news:", error.message);
    return [];
  }
}

export async function syncToSanity() {
  try {
    const articles = await fetchNews();

    if (articles.length === 0) {
      console.log("No articles to sync.");
      return;
    }

    for (const article of articles) {
      if (!article.title || !article.link) continue;

      const existing = await client.fetch(
        `*[_type == "news" && sourceUrl == $url][0]`,
        { url: article.link }
      );

      if (existing) continue;

      await client.create({
        _type: "news",
        title: article.title,
        description: article.description || "",
        sourceUrl: article.link,
        publishedAt: article.pubDate || new Date().toISOString(),
        isApproved: false,
        isFromAPI: true,
      });

      console.log(`ðŸ“° Created: ${article.title}`);
    }

    console.log("âœ… Sync complete");
  } catch (error) {
    console.log("This is error generated by sanity while syncing", error);
  }
}

export async function getNewsArticles() {
  try{
    const news = await client.fetch(
      groq`*[_type == "news"]{
      _id,
    title,
    description,
    sourceUrl,
    publishedAt,
      }`
    );
    return news;
  }catch(error){
    console.error("Error fetching news articles from sanity", error);
    return [];
  }
  
}

async function fetchTrendingMovies() {
  try {
    const url = `https://api.themoviedb.org/3/trending/movie/day?api_key=${process.env.TMDB_API_KEY}`;
    const res = await fetch(url);

    if (!res.ok) {
      throw new Error(`Failed to fetch trending movies: ${res.statusText}`);
    }

    const data = await res.json();
    return data.results || [];
  } catch (error) {
    console.error("Error fetching trending movies:", error.message);
    return [];
  }
}

export async function syncTrendingMoviesToSanity() {
  try {
    const movies = await fetchTrendingMovies();

    if (movies.length === 0) {
      console.log("No trending movies to sync.");
      return;
    }

    for (const movie of movies) {
      if (!movie.title || !movie.id) continue;

      const existing = await client.fetch(
        `*[_type == "hotPick" && tmbdUrl == $url][0]`,
        { url: `https://www.themoviedb.org/movie/${movie.id}` }
      );

      if (existing) continue;

      await client.create({
        _type: "hotPick",
        movieName: movie.title,
        posterUrl: `https://image.tmdb.org/t/p/w500${movie.poster_path}`,
        overview: movie.overview || "No overview available.",
        tmbdUrl: `https://www.themoviedb.org/movie/${movie.id}`,
        isApproved: false,
        isFromAPI: true,
      });

      console.log(`ðŸŽ¥ Created: ${movie.title}`);
    }

    console.log("âœ… Trending movies sync complete");
  } catch (error) {
    console.error("Error syncing trending movies to Sanity:", error.message);
  }
}

export async function getHotPicks() {
  try {
    const hotPicks = await client.fetch(
      groq`*[_type == "hotPick"]{
        _id,
        movieName,
        posterUrl,
        overview,
        tmbdUrl
      }`
    );
    return hotPicks;
  } catch (error) {
    console.error("Error fetching hot picks from Sanity:", error.message);
    return [];
  }
}